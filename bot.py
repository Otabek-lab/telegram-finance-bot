import os
import logging
import asyncio
import langdetect
import numpy as np
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime
from deep_translator import GoogleTranslator
from sklearn.linear_model import LinearRegression

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Railway (–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Railway ‚Üí Variables!")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
transactions = []
translator = GoogleTranslator(source="auto", target="ru")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    reply_keyboard = [["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥", "–û—Ç—á–µ—Ç", "–ü—Ä–æ–≥–Ω–æ–∑"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç. –ó–∞–ø–∏—Å—ã–≤–∞–π –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã, –∞ —è —Å–¥–µ–ª–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É!", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def record_transaction(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    try:
        detected_lang = langdetect.detect(text)
        if detected_lang != "ru":
            text = translator.translate(text)
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞.")
        return

    words = text.split()
    if len(words) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –î–æ—Ö–æ–¥ 1000 –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ –†–∞—Å—Ö–æ–¥ 500 –ï–¥–∞")
        return
    
    transaction_type = words[0].lower()
    if transaction_type not in ["–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"]:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ '–î–æ—Ö–æ–¥' –∏–ª–∏ '–†–∞—Å—Ö–æ–¥' –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    try:
        amount = float(words[1])
        category = " ".join(words[2:])
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    transactions.append({"date": datetime.now(), "type": transaction_type, "amount": amount, "category": category})
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {transaction_type} {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
async def generate_report(update: Update, context: CallbackContext) -> None:
    if not transactions:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return
    
    df = pd.DataFrame(transactions)
    income = df[df["type"] == "–¥–æ—Ö–æ–¥"].groupby("category")["amount"].sum()
    expense = df[df["type"] == "—Ä–∞—Å—Ö–æ–¥"].groupby("category")["amount"].sum()
    total_income = df[df["type"] == "–¥–æ—Ö–æ–¥"]["amount"].sum()
    total_expense = df[df["type"] == "—Ä–∞—Å—Ö–æ–¥"]["amount"].sum()
    
    report_text = f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:\nüí∞ –î–æ—Ö–æ–¥: {total_income} —Å—É–º\nüí∏ –†–∞—Å—Ö–æ–¥: {total_expense} —Å—É–º\n"
    
    fig, ax = plt.subplots(figsize=(8, 6))
    categories = pd.concat([income, expense], axis=1).fillna(0)
    categories.columns = ["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"]
    categories.plot(kind="bar", ax=ax, color=["green", "red"])
    ax.set_title("–î–æ—Ö–æ–¥—ã –∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    ax.set_ylabel("–°—É–º–º–∞")
    plt.xticks(rotation=45)

    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)

    await update.message.reply_text(report_text)
    await update.message.bot.send_photo(update.message.chat_id, photo=buffer)

# –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
async def forecast(update: Update, context: CallbackContext) -> None:
    if not transactions:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    df = pd.DataFrame(transactions)
    df["date"] = pd.to_datetime(df["date"])
    df["days"] = (df["date"] - df["date"].min()).dt.days

    for trans_type in ["–¥–æ—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥"]:
        subset = df[df["type"] == trans_type]
        if len(subset) > 1:
            X = subset[["days"]]
            y = subset["amount"]
            model = LinearRegression()
            model.fit(X, y)
            future_days = np.array([[df["days"].max() + 7], [df["days"].max() + 30]])
            predictions = model.predict(future_days)
            await update.message.reply_text(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {trans_type}: \n–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é: {predictions[0]:.2f} —Å—É–º\n–ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü: {predictions[1]:.2f} —Å—É–º")
        else:
            await update.message.reply_text(f"‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ {trans_type}.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, record_transaction))
    app.add_handler(CommandHandler("report", generate_report))
    app.add_handler(CommandHandler("forecast", forecast))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
